var __index = {"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"WELCOME TO MOLD","text":"<p>Meta-variable Operations for Lean Development</p> <p>Mold is a powerful tool that facilitates the creation and management of project templates through customizable files with meta-variables. It allows users to prepare a set of files and define placeholders (meta-variables) using double curly braces that can be replaced with specific values when creating new projects.</p> <p>While Mold brings its own unique approach, several common features and functionalities can be found in similar existing tools for project templating and scaffolding.</p>"},{"location":"index.html#different-sources","title":"Different sources","text":"<p>Mold can operate on a single file or recursively in a given directory. All files processed by Mold must end with the <code>mold</code> extension. The process of variable substitution from a mold file generates a new file, with the same name except the <code>mold</code> extension. If the generated file name already exists, an error can be issued or overwriting it can be forced.</p>"},{"location":"index.html#three-modes-of-variable-substitution","title":"Three modes of variable substitution","text":"<p>All variables can be used in three different substitution modes: <code>normal</code>, <code>optional</code> and <code>mandatory</code>. This provides different error management when Mold encounters an undefined variable.</p>"},{"location":"index.html#source-file-name-substitution","title":"Source file name substitution","text":"<p>Variable substitution can be applied also in the source file name. The syntax for variables is slightly different for file names, for portability reasons, but the concept is the same.</p>"},{"location":"index.html#variable-definitions-file","title":"Variable definitions file","text":"<p>All variable values are assigned in a single TOML file. The accepted file format is the most simple TOML format, with a single <code>vairable = \"value\"</code> assignment per line.</p>"},{"location":"index.html#defined-settings","title":"Defined settings","text":"<p>It is possible to use variables prefixed with <code>mold-</code>, like <code>mold-overwrite</code>, to specify Mold settings inside the definitions file. Settings specified by the command line or the library interface can be overwritten by these defined settings. This enables the possibility to easily remember and force some settings during development, regardless of the settings in the project configuration.</p>"},{"location":"index.html#template-inclusion","title":"Template inclusion","text":"<p>Mold allows the inclusion of template files, which must have extension <code>molt</code>. This opens the possibility to write small snippets or generic templates that can be used across projects.</p>"},{"location":"about.html","title":"GETTING STARTED","text":"<p>foo bar is the key</p>"},{"location":"installation.html","title":"INSTALLATION","text":""},{"location":"installation.html#ada-library","title":"Ada Library","text":"<p>Original implementation is the Ada library <code>libmold</code>, available in the Alire community index. This allows you to integrate the libmold crate in your Ada projects.</p>"},{"location":"installation.html#command-line-tool","title":"Command Line Tool","text":"<p>A command line tool, called <code>mold</code>, is available for Linux, Mac and Window.</p> <p>Download binary packages from GitHub.</p> <p>Warning</p> <p>All publication activities still in progress.</p>"},{"location":"reference-guide.html","title":"USER GUIDE","text":""},{"location":"reference-guide.html#overall-process","title":"Overall Process","text":"<p>Variable substitution takes place in a single file or directory, and recursively across all sub-directories. Processed files end with the <code>mold</code> extension. The substitution process generates a new file with all the variables replaced by the corresponding values. The new file name is the same as the source file, but removing the <code>.mold</code> extension:</p> <pre><code>   README.md.mold ---[ mold generates ]--&gt; README.md\n</code></pre> <p>By default, if a generated file already exists, Mold issues a error, but it is possible to force overwriting existing files.</p>"},{"location":"reference-guide.html#variable-substitution","title":"Variable Substitution","text":"<p>All variables inside a file muts be written with the syntax <code>{{variable}}</code>:</p> README.md.mold<pre><code>   {{TITLE}}\n   Hello {{world}}, this is just an {{example}}\n</code></pre> <p>with any number of spaces between variable name and curly braces:</p> README.md.mold<pre><code>   {{  TITLE  }}\n   Hello {{ world }}, ths is just an {{           example  }}\n</code></pre> <p>Thus, with the following definitions</p> mold.toml<pre><code>   TITLE   = \"README, please\"\nworld   = \"World\"\nexample = \"example text\"\n</code></pre> <p>the new file contents would be:</p> README.md<pre><code>   README, please\n   Hello World, ths is just an example text\n</code></pre>"},{"location":"reference-guide.html#substitution-modes","title":"Substitution Modes","text":"<p>There are three substitution modes in Mod. The only difference between them is the error management when an undefined variable is found.</p>"},{"location":"reference-guide.html#normal","title":"Normal","text":"<p>For an undefined variable, the default behavior is to issue a warning and left the variables unchanged (not replaced). If <code>world</code> was undefined, the above example would be:</p> README.md.mold<pre><code>   README, please\n   Hello {{ world }}, ths is just an example test\n</code></pre>"},{"location":"reference-guide.html#optional","title":"Optional","text":"<p>Optional substitution is written as <code>{{ ?variable }}</code>, for any variable. For undefined variables, optional substitution does no issues a warning and the <code>{{ ?variable }}</code> text is removed.</p> <p>For example,</p> <p>README.mb.mold<pre><code>   {{  TITLE  }}\n   Hello {{ ?world }}, this is just an {{           example  }}\n</code></pre> issues no warning and generates</p> README.md<pre><code>   README, please\n   Hello , this is just an example text\n</code></pre> <p>Note</p> <p>There are no optional variables: it is the substitution mode that can be optional. Any variable can be used as <code>{{variable}}</code> and <code>{{?variable}}</code> at different places, even in the same file. The difference between the substitution modes is the error handling when the variable is undefined.</p>"},{"location":"reference-guide.html#mandatory","title":"Mandatory","text":"<p>Mandatory substitution is written as <code>{{ #variable }}</code>. If the variable is undefined, Mold issues an error and makes no substitution. By default, the substitution process is aborted on error.</p> <p>Syntax</p> <p>In optional and mandatory substitution modes, characters <code>?</code> and <code>#</code> are part of the variable name, not part of the curly braces. Thus, <code>{{?variable}}</code> and <code>{{  #variable  }}</code> are valid variables, while <code>{{? variable }}</code> and <code>{{#  variable}}</code> are invalid.</p>"},{"location":"reference-guide.html#file-name-substitution","title":"File Name Substitution","text":"<p>Variables in file names must be written with the syntax <code>__variable__</code>, with no spaces between the variable name and underscores.</p> <p>For example, the file</p> <pre><code>   README___world__.md.mold\n</code></pre> <p>would generate, with the above definitions, a new file called</p> <p><pre><code>   README_World.md\n</code></pre> File name substitution can be disabled. When enabled, undefined variable in a file name issues an error (no optional substitution here).</p> <p>Warning</p> <p>Although it is possible to use directory names in variables definitions, like <code>world = \"foo/bar\"</code> to generate the file <code>README_foo/bar.md</code>, it is a strongly not recommended practice, for portability reasons. Mold does not check if you use directory separators in variable values, so use at your own risk.</p>"},{"location":"reference-guide.html#definitions-file","title":"Definitions File","text":"<p>The default definitions file is called <code>mold.toml</code>. It must be a simple TOML file, with a</p> variable assignment<pre><code>   variable = \"value\"\n</code></pre> <p>per line. Only strings are supported, and no arrays nor tables can be present. For more information, please read the TOML specification. Comments and multi-line strings are supported.</p>"},{"location":"reference-guide.html#settings","title":"Settings","text":"<p>The <code>mold</code> tool is a CLI wrapper of <code>libmold</code>, so this section applies to both implementations. Description is given as in the Ada <code>libmold</code> library. There is a flag in <code>mold</code> the exact meaning.</p> Setting Description Default <code>Rename_Source</code> Enables the use of variable substitution in the source file name. <code>True</code> <code>Delete_Source</code> Delete the source file if the variable substitution process finish successfully. <code>True</code> <code>Overwrite</code> Overwrite the destination file if already exists. <code>False</code> <code>Defined_Settings</code> Enables the use of defined settings in the definitions fie. <code>True</code> <code>Action</code> Predefined behavior for normal variable substitution mode in case of undefined variable. <code>Ignore</code> <code>Alert</code> Predefined error handling for normal variable substitution mode in case of undefined variable. <code>Warning</code> <code>Abort_On_Error</code> If <code>True</code>, aborts the variable substitution process as soon as an error is detected. <code>True</code> <p>Action &amp; Alert</p> <p><code>Action</code> and <code>Alert</code> only apply to normal substitution of variables when an undefined variable is found:</p> <ul> <li><code>Action</code> can be <code>Ignore</code>, to left the substitution as is, or <code>Empty</code> to remove the text.</li> <li><code>Alert</code> can be <code>None</code>, to silently skip the problem, or <code>Warning</code> to issue a warning message.</li> </ul>"},{"location":"reference-guide.html#defined-settings","title":"Defined Settings","text":"<p>All variables starting with the prefix <code>mold-</code> are considered by Mold as setting variables, which means that they change the way in which Mold behaves by changing a Mold setting.</p> <p>For example,</p> mold.toml<pre><code>   mold-delete-source = \"false\"\nTITLE   = \"README, please\"\nworld   = \"World\"\nexample = \"example text\"\n</code></pre> <p>would prevent to remove the source file when the variable substitution process ends successfully.</p> <p>The variable can be used also as a normal variable, so for example</p> README___world__.md.mold<pre><code>   {{  TITLE  }}\n   Hello {{ world }}, ths is just an {{           example  }}\n\n   Note: This file generated with defined settings\n         `delete-source` = \"{{?mold-delete-source}}\"\n         `overwrite`     = \"{{?mold-overwrite}}\"\n</code></pre> <p>would generate</p> README_World.md<pre><code>   README, please\n   Hello World, ths is just an example text\n\n   Note: This file generated with defined settings\n         `delete-source` = \"false\"\n         `overwrite`     = \"\"\n</code></pre> <p>All possible defined settings variables are obtained with the above settings, in lowercase, replacing <code>_</code> by <code>-</code>, and prefixed with <code>mold-</code>. For example, <code>mold-rename-source</code>, <code>mold-delete-source</code>, <code>mold-overwrite</code>, and so on.</p>"},{"location":"reference-guide.html#template-inclusion","title":"Template Inclusion","text":"<p>Other files can be used a generic template for header, footers and so on. These template files must have the <code>molt</code> extension. Can be included at any point in a <code>mold</code> file, in a single line, with the syntax</p> <pre><code>   {{ include:header.molt }}\n</code></pre> <p>When this line is found, Mold opens and processes the included file and the output is sent into the currently generated file.</p> <p>This is useful to share template snippets across several files or projects, greatly simplifying the maintenance.</p> <p>A template file can include other template files. The only limit on how many included files are supported is on your system. When circular dependencies are detected, an error is reported and the process is stopped.</p>"},{"location":"user-guide.html","title":"USER GUIDE","text":""},{"location":"user-guide.html#ada-library","title":"Ada Library","text":"<p>The Ada interface of <code>libmold</code> is quite simple. It consists of a unique public package with only one function.</p> <p>All the following descriptions are in the context of the <code>Mold</code> package:</p> mold.ads<pre><code>   package Mold is\n--  type definitions and function declaration\nend Mold;\n</code></pre>"},{"location":"user-guide.html#apply","title":"Apply","text":"<p>The only function call available is:</p> mold.ads<pre><code>   function Apply\n(\nSource      : String          := \".\";\nOutput_Dir  : String          := \".\";\nDefinitions : String          := \"mold.toml\";\nSettings    : Settings_Access := null;\nResults     : Results_Access  := null\n)\nreturn Natural;\n</code></pre> <ol> <li> <p><code>Source</code> is a file or directory name.</p> </li> <li> <p><code>Output_Dir</code> is a directory name used when <code>Source</code> is a file name to      create the generated file in a different directory.</p> </li> <li> <p><code>Definition</code> is the file name that contains the variables definition.</p> </li> <li> <p><code>Settings</code> is a pointer to a <code>Mold.Settings_Type</code> object. If <code>null</code>, the      default settings are used. See section below for a complete description.</p> </li> <li> <p>Return value is the number of errors detected.</p> </li> </ol>"},{"location":"user-guide.html#settings","title":"Settings","text":"<p>The <code>Settings_Type</code> is defined as:</p> mold.ads<pre><code>   type Settings_Type is record\nRename_Source    : aliased Boolean;\nDelete_Source    : aliased Boolean;\nOverwrite        : aliased Boolean;\nDefined_Settings : aliased Boolean;\nAction           : aliased Undef_Var_Action;\nAlert            : aliased Undef_Var_Alert;\nAbort_On_Error   : aliased Boolean;\nend record;\ntype Settings_Access is access all Settings_Type;\n</code></pre> <p>If you specify a <code>null</code> pointer in the <code>Settings</code> parameter, then the default settings are used, which are defined as:</p> mold.ads<pre><code>   Default_Settings : aliased Settings_Type :=\n(\nRename_Source    =&gt; True,\nDelete_Source    =&gt; True,\nOverwrite        =&gt; False,\nDefined_Settings =&gt; True,\nAction           =&gt; Ignore,\nAlert            =&gt; Warning,\nAbort_On_Error   =&gt; True\n);\n</code></pre> <p>Refer to Settings section for more information.</p>"},{"location":"user-guide.html#results","title":"Results","text":"<p>If you give a pointer to a <code>Results_Type</code> object as parameter in the <code>Apply</code> function, detailed results are provided:</p> mold.ads<pre><code>   type Field_Type is\n(\nFiles,          --  files processed\nRenamed,        --  files renames\nOverwritten,    --  files overwritten\nVariables,      --  variables found\nDefined,        --  variables with a defined value\nUndefined,      --  undefined variables found\nSubstituted,    --  replacements made with a defined value\nIgnored,        --  replacements ignored\nEmptied,        --  replacements emptied\nWarnings,       --  warnings issued\nErrors          --  errors issued\n);\ntype Results_Type is array (Field_Type) of Natural;\ntype Results_Access is access all Results_Type;\n</code></pre>"},{"location":"user-guide.html#command-line-tool","title":"Command Line Tool","text":"<p>Warning</p> <p>Work still in progress.</p>"}]}